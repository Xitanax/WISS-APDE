openapi: 3.0.3
info:
  title: Chocadies Recruiting API
  version: "2.1.0"
servers:
  - url: /
paths:
  /api/health:
    get:
      summary: Healthcheck
      responses:
        '200': { description: ok }

  /api/auth/login:
    post:
      summary: Login (JWT)
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [email, password], properties: { email: {type: string}, password: {type: string} } } } }
      responses:
        '200': { description: token }

  /api/public/register:
    post:
      summary: Applicant registrieren
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [email, password], properties: { email: {type: string}, password: {type: string}, birthdate: {type: string}, address: {type: string} } } } }
      responses:
        '200': { description: ok }

  /api/public/jobs:
    get:
      summary: Öffentliche Jobs
      responses:
        '200': { description: Liste }

  /api/v2/jobs:
    get:
      summary: Jobs (HR)
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: ok }
    post:
      summary: Job anlegen (HR)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [title], properties: { title: {type: string}, description: {type: string}, open: {type: boolean} } } } }
      responses:
        '200': { description: ok }

  /api/v2/applications:
    get:
      summary: Bewerbungen (HR) – optional nach jobId filtern, sonst alle
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: jobId
          schema: { type: string }
      responses:
        '200': { description: Liste }
    post:
      summary: Bewerbung absenden (Applicant, inkl. optionale Notiz)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [jobId], properties: { jobId: {type: string}, note: {type: string} } } } }
      responses:
        '201': { description: erstellt }

  /api/v2/applications/me:
    get:
      summary: Meine Bewerbungen (Applicant)
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: Liste }

  /api/v2/meetings:
    get:
      summary: Meetings (HR) – optional jobId
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: jobId
          schema: { type: string }
      responses:
        '200': { description: Liste }
    post:
      summary: Meeting anlegen (Applicant Vorschlag / HR mit applicantEmail)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [jobId, startsAt, endsAt]
              properties:
                jobId: { type: string }
                startsAt: { type: string, format: date-time }
                endsAt: { type: string, format: date-time }
                mode: { type: string, enum: [online, onsite] }
                location: { type: string }
                applicantEmail: { type: string, description: "Nur HR" }
      responses:
        '200': { description: ok }

  /api/v2/users:
    get:
      summary: Benutzerliste (Admin)
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: ok }
    post:
      summary: Benutzer anlegen (Admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [email, password, role], properties: { email: {type: string}, password: {type: string}, role: {type: string, enum: [admin, hr, applicant]} } } } }
      responses:
        '201': { description: ok }

  /api/v2/agencies:
    get:
      summary: Agencies auflisten (Admin)
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: ok }
    post:
      summary: Agency anlegen (Admin) – gibt API-Key zurück
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [name], properties: { name: {type: string} } } } }
      responses:
        '200': { description: ok }

  /api/v2/agencies/{id}/rotate-key:
    post:
      summary: Agency-Key rotieren (Admin)
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: string } }]
      responses:
        '200': { description: ok }

  /api/v2/agencies/{id}:
    delete:
      summary: Agency löschen (Admin)
      security: [{ bearerAuth: [] }]
      parameters: [{ in: path, name: id, required: true, schema: { type: string } }]
      responses:
        '200': { description: ok }

  /api/agency/jobs:
    get:
      summary: Partner-API – Jobs (per x-api-key)
      parameters: [{ in: header, name: x-api-key, required: true, schema: { type: string } }]
      responses:
        '200': { description: ok }

  /api/agency/applications:
    get:
      summary: Partner-API – Bewerbungen (per x-api-key)
      parameters:
        - in: header
          name: x-api-key
          required: true
          schema: { type: string }
        - in: query
          name: jobId
          schema: { type: string }
      responses:
        '200': { description: ok }

  /api/v2/linkedin/import-applicant:
    post:
      summary: (Dummy) Kandidaten aus LinkedIn importieren (HR)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, required: [email], properties: { profileUrl: {type: string}, email: {type: string}, name: {type: string}, birthdate: {type: string}, address: {type: string}, jobId: {type: string} } } } }
      responses:
        '200': { description: ok }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }
